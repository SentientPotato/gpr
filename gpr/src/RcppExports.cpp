// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// gprMCMC
arma::mat gprMCMC(const arma::vec& y, const arma::mat& X, const arma::uword nburn, const arma::uword nsample, const arma::vec& b, const arma::mat& B, const arma::vec& e, const arma::mat& E, const double shape, const double scale, const arma::uword minloops, const arma::uword maxloops, const arma::uword ntune, const double target_rate, const double rate_tol, double prop_scale, const double weight, const bool verbose);
RcppExport SEXP _gpr_gprMCMC(SEXP ySEXP, SEXP XSEXP, SEXP nburnSEXP, SEXP nsampleSEXP, SEXP bSEXP, SEXP BSEXP, SEXP eSEXP, SEXP ESEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP minloopsSEXP, SEXP maxloopsSEXP, SEXP ntuneSEXP, SEXP target_rateSEXP, SEXP rate_tolSEXP, SEXP prop_scaleSEXP, SEXP weightSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type e(eSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type E(ESEXP);
    Rcpp::traits::input_parameter< const double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type minloops(minloopsSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type maxloops(maxloopsSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type ntune(ntuneSEXP);
    Rcpp::traits::input_parameter< const double >::type target_rate(target_rateSEXP);
    Rcpp::traits::input_parameter< const double >::type rate_tol(rate_tolSEXP);
    Rcpp::traits::input_parameter< double >::type prop_scale(prop_scaleSEXP);
    Rcpp::traits::input_parameter< const double >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(gprMCMC(y, X, nburn, nsample, b, B, e, E, shape, scale, minloops, maxloops, ntune, target_rate, rate_tol, prop_scale, weight, verbose));
    return rcpp_result_gen;
END_RCPP
}
// gprMCMCZ
arma::mat gprMCMCZ(const arma::vec& y, const arma::mat& X, const arma::uword nburn, const arma::uword nsample, const arma::vec& e, const arma::mat& E, const double shape, const double scale, const arma::uword minloops, const arma::uword maxloops, const arma::uword ntune, const double target_rate, const double rate_tol, double prop_scale, const double weight, const bool verbose);
RcppExport SEXP _gpr_gprMCMCZ(SEXP ySEXP, SEXP XSEXP, SEXP nburnSEXP, SEXP nsampleSEXP, SEXP eSEXP, SEXP ESEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP minloopsSEXP, SEXP maxloopsSEXP, SEXP ntuneSEXP, SEXP target_rateSEXP, SEXP rate_tolSEXP, SEXP prop_scaleSEXP, SEXP weightSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type e(eSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type E(ESEXP);
    Rcpp::traits::input_parameter< const double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type minloops(minloopsSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type maxloops(maxloopsSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type ntune(ntuneSEXP);
    Rcpp::traits::input_parameter< const double >::type target_rate(target_rateSEXP);
    Rcpp::traits::input_parameter< const double >::type rate_tol(rate_tolSEXP);
    Rcpp::traits::input_parameter< double >::type prop_scale(prop_scaleSEXP);
    Rcpp::traits::input_parameter< const double >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(gprMCMCZ(y, X, nburn, nsample, e, E, shape, scale, minloops, maxloops, ntune, target_rate, rate_tol, prop_scale, weight, verbose));
    return rcpp_result_gen;
END_RCPP
}
// gpr_predict
arma::mat gpr_predict(const arma::mat& P, const arma::vec& y, const arma::mat& X, const arma::mat& Z);
RcppExport SEXP _gpr_gpr_predict(SEXP PSEXP, SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    rcpp_result_gen = Rcpp::wrap(gpr_predict(P, y, X, Z));
    return rcpp_result_gen;
END_RCPP
}
// gpr_predictZ
arma::mat gpr_predictZ(const arma::mat& P, const arma::vec& y, const arma::mat& X, const arma::mat& Z);
RcppExport SEXP _gpr_gpr_predictZ(SEXP PSEXP, SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    rcpp_result_gen = Rcpp::wrap(gpr_predictZ(P, y, X, Z));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gpr_gprMCMC", (DL_FUNC) &_gpr_gprMCMC, 18},
    {"_gpr_gprMCMCZ", (DL_FUNC) &_gpr_gprMCMCZ, 16},
    {"_gpr_gpr_predict", (DL_FUNC) &_gpr_gpr_predict, 4},
    {"_gpr_gpr_predictZ", (DL_FUNC) &_gpr_gpr_predictZ, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_gpr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
